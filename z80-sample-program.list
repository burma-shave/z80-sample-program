# File main.asm
0000			;=========================================================================== 
0000			; main.asm 
0000			;=========================================================================== 
0000			 
0000			 
0000			    ORG 0x4000 
4000 00...		    defs 0x6000 - $    ; move after screen area 
6000 00			screen_top: defb    0   ; WPMEM 
6001			     
6001			 
6001			;=========================================================================== 
6001			; Persistent watchpoint. 
6001			; Change WPMEMx to WPMEM to activate. 
6001			; If you do so the program will hit a breakpoint when it is tried to 
6001			; write to the first byte of the 3rd line. 
6001			; If you are not able to compile these sources, you can also change WPMEMx 
6001			; to WPMEM directly in teh .list file and start the debugger again. 
6001			; When program breaks in the fill_memory sub routine please hover over hl 
6001			; to see that it contsin 0x5804 or COLOR_SCREEN+64. 
6001			;=========================================================================== 
6001			 
6001			; WPMEM 0x5840, 1, w 
6001			 
6001			 
6001			;=========================================================================== 
6001			; Include modules 
6001			;=========================================================================== 
6001			include "utilities.asm" 
6001			;=========================================================================== 
6001			; utilities.asm 
6001			; Submodule for some common routines. 
6001			;=========================================================================== 
6001			 
6001			; Some constants 
6001			PAUSE_TIME:     equ 5000   ; 0.5 sec 
6001			 
6001			 
6001			; Pauses for a while. 
6001			; de: wait time, ca: de*0.1ms 
6001			pause: 
6001 f5				push af 
6002 c5				push bc 
6003			 
6003			pause_loop_l2: 
6003 06 1a			ld b,26 
6005			pause_loop_l1: 
6005 10 fe			djnz pause_loop_l1 ; 1 cycle should be roughly 100us=0.1ms 
6007			 
6007 1b				dec de 
6008 7a				ld a,d 
6009 b3				or e 
600a 20 f7			jr nz,pause_loop_l2 
600c			 
600c c1				pop bc 
600d f1				pop af 
600e c9				ret 
# End of file utilities.asm
600f			include "fill.asm" 
600f			;=========================================================================== 
600f			; fill.asm 
600f			; Submodule with memory fill routines. 
600f			;=========================================================================== 
600f			 
600f			; Some constants 
600f			BCKG_LINE_SIZE:  equ     32 
600f			 
600f			; Colors  
600f			BLACK:          equ 0<<3 
600f			BLUE:           equ 1<<3 
600f			RED:            equ 2<<3 
600f			MAGENTA:        equ 3<<3 
600f			GREEN:          equ 4<<3 
600f			CYAN:           equ 5<<3 
600f			YELLOW:         equ 6<<3 
600f			WHITE:          equ 7<<3 
600f			 
600f			 
600f			; Fills a memory area with a certain value. 
600f			; a = contains the fill value. 
600f			; hl = address to fill 
600f			; bc = size 
600f			fill_memory: 
600f 77			    ld (hl),a 
6010 5d			    ld e,l 
6011 54			    ld d,h 
6012 13			    inc de 
6013 0b			    dec bc 
6014 ed b0		    ldir 
6016 c9			    ret	 
6017			 
6017			 
6017			; Fills a background line with a color.  
6017			; a = color 
6017			; de = points to background screen 
6017			fill_bckg_line: 
6017 01 20 00		    ld bc,BCKG_LINE_SIZE 
601a 6b			    ld l,e 
601b 62			    ld h,d 
601c cd 0f 60		    call fill_memory 
601f			    ; check that destination address is still in screen background  
601f 21 ff 5a		    ld hl,COLOR_SCREEN+COLOR_SCREEN_SIZE-1 
6022 b7			    or a    ; clear carry 
6023 ed 52		    sbc hl,de ; compare  
6025 f0			    ret p 
6026			    ; ld start address 
6026 11 00 58		    ld de,COLOR_SCREEN  
6029 c9			    ret 
602a			 
602a			 
602a			; Increments the fill_colors_ptr and resets it if necessary. 
602a			inc_fill_colors_ptr: 
602a 2a 3f 60		    ld hl,(fill_colors_ptr) 
602d 23			    inc hl 
602e 22 3f 60		    ld (fill_colors_ptr),hl  
6031			     
6031			    ; check if out of range 
6031 01 46 60		    ld bc,fill_colors_end 
6034 b7			    or a    ; clear carry 
6035 ed 42		    sbc hl,bc ; compare  
6037 f8			    ret m 
6038			     
6038			    ; reset 
6038 21 41 60		    ld hl,fill_colors 
603b 22 3f 60		    ld (fill_colors_ptr),hl 
603e c9			    ret 
603f			 
603f			 
603f			; Pointer to fill colors. 
603f 00 00		fill_colors_ptr:    defw 0 
6041			 
6041			; Contains the colors for the lines. Each entry represnts the color for one line. 
6041			fill_colors: 
6041 10 30 08 20 18	    defb RED, YELLOW, BLUE, GREEN, MAGENTA 
6046			fill_colors_end:     
6046 00			    defb 0  ; WPMEM 
6047			     
6047			 
# End of file fill.asm
6047			include "clearscreen.asm" 
6047			;=========================================================================== 
6047			; clearscreen.asm 
6047			; Submodule to clear the entire screen. 
6047			;=========================================================================== 
6047			 
6047			; Some constants 
6047			SCREEN:         equ 0x4000 
6047			SCREEN_SIZE:    equ 0x1800 
6047			 
6047			COLOR_SCREEN:       equ 0x5800 
6047			COLOR_SCREEN_SIZE:  equ 0x0300 
6047			 
6047			 
6047			; Clears the screen 
6047			clear_screen: 
6047 af			    xor a 
6048 01 00 18		    ld bc,SCREEN_SIZE 
604b 21 00 40		    ld hl,SCREEN 
604e cd 0f 60		    call fill_memory 
6051 c9			    ret	 
6052			     
6052			 
6052			; Clears the background 
6052			clear_backg: 
6052 af			    xor a 
6053 cd 57 60		    call fill_backg 
6056 c9			    ret	 
6057			 
6057			 
6057			; Fills the background with fore and background color. 
6057			; a contains the fill color. 
6057			fill_backg: 
6057 01 00 03		    ld bc,COLOR_SCREEN_SIZE 
605a 21 00 58		    ld hl,COLOR_SCREEN 
605d cd 0f 60		    call fill_memory 
6060 c9			    ret	 
6061			     
6061			 
6061			     
# End of file clearscreen.asm
6061			 
6061			 
6061			;=========================================================================== 
6061			; main routine - the code execution starts here. 
6061			; Sets up the new interrupt routine, the memory 
6061			; banks and jumps to the start loop. 
6061			;=========================================================================== 
6061			main: 
6061			    ; Disable interrupts 
6061 f3			    di 
6062			  
6062			    ; Setup stack 
6062 31 50 61		    ld sp,stack_top 
6065			 
6065			if 0 
6065			    ld b,1 
6065			start_wait_loop: 
6065			    ld de,PAUSE_TIME 
6065			    call pause 
6065			    nop 
6065			    djnz start_wait_loop 
6065			endif 
6065			  
6065			    ; CLS 
6065 cd 47 60		    call clear_screen 
6068 cd 52 60		    call clear_backg 
606b			 
606b			    ; Init 
606b 21 41 60		    ld hl,fill_colors 
606e 22 3f 60		    ld (fill_colors_ptr),hl 
6071 11 00 58		    ld de,COLOR_SCREEN 
6074			     
6074			main_loop: 
6074			    ; fill line with color 
6074 2a 3f 60		    ld hl,(fill_colors_ptr) 
6077 7e			    ld a,(hl) 
6078 cd 17 60		    call fill_bckg_line 
607b			     
607b			    ; break 
607b d5			    push de 
607c 11 88 13		    ld de,PAUSE_TIME 
607f cd 01 60		    call pause 
6082 d1			    pop de 
6083			 
6083			    ; next line 
6083 cd 2a 60		    call inc_fill_colors_ptr 
6086			 
6086 18 ec		    jr main_loop 
6088			 
6088			 
6088			 
6088			;=========================================================================== 
6088			; Stack.  
6088			;=========================================================================== 
6088			 
6088			; Stack: this area is reserved for the stack 
6088			STACK_SIZE: equ 100d    ; in words 
6088			 
6088			 
6088			; Reserve stack space 
6088			stack_bottom: 
6088 0x00...		    defs    STACK_SIZE*2, 0 
6150			stack_top:  ; WPMEM 
6150			 
6150			 
6150			;=========================================================================== 
6150			; After loading the snapshot file (.sna) the stackpointer is pointing here. 
6150			; The value is used as starting point. 
6150			;=========================================================================== 
6150 0x00...		    defs    0xFDFA - $, 0 
fdfa			; address is 0xFDFA 
fdfa 61 60		    defw    main ; The .sna format expects the starting address on the stack. 
fdfc			 
fdfc			 
fdfc			; Fill up to 65535 
fdfc 00...		    defs 0x10000 - $ 
# End of file main.asm
0000
