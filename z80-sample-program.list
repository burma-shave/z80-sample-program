# File main.asm
0000			;=========================================================================== 
0000			; main.asm 
0000			;=========================================================================== 
0000			 
0000			 
0000			    ORG 0x4000 
4000 00...		    defs 0x6000 - $    ; move after screen area 
6000 00			screen_top: defb    0   ; WPMEM 
6001			     
6001			 
6001			;=========================================================================== 
6001			; Persistent watchpoint. 
6001			; Change WPMEMx to WPMEM to activate. 
6001			; If you do so the program will hit a breakpoint when it is tried to 
6001			; write to the first byte of the 3rd line. 
6001			; If you are not able to compile these sources, you can also change WPMEMx 
6001			; to WPMEM directly in teh .list file and start the debugger again. 
6001			; When program breaks in the fill_memory sub routine please hover over hl 
6001			; to see that it contsin 0x5804 or COLOR_SCREEN+64. 
6001			;=========================================================================== 
6001			 
6001			; WPMEMx 0x5840, 1, w 
6001			 
6001			 
6001			;=========================================================================== 
6001			; Include modules 
6001			;=========================================================================== 
6001			include "utilities.asm" 
6001			;=========================================================================== 
6001			; utilities.asm 
6001			; Submodule for some common routines. 
6001			;=========================================================================== 
6001			 
6001			; Some constants 
6001			PAUSE_TIME:     equ 5000   ; 0.5 sec 
6001			 
6001			 
6001			; Pauses for a while. 
6001			; de: wait time, ca: de*0.1ms 
6001			pause: 
6001 c9				ret	; comment this line if you would like to see a pause between drawing of the lines. 
6002			 
6002 f5				push af 
6003 c5				push bc 
6004			 
6004			pause_loop_l2: 
6004 06 1a			ld b,26 
6006			pause_loop_l1: 
6006 10 fe			djnz pause_loop_l1 ; 1 cycle should be roughly 100us=0.1ms 
6008			 
6008 1b				dec de 
6009 7a				ld a,d 
600a b3				or e 
600b 20 f7			jr nz,pause_loop_l2 
600d			 
600d c1				pop bc 
600e f1				pop af 
600f c9				ret 
# End of file utilities.asm
6010			include "fill.asm" 
6010			;=========================================================================== 
6010			; fill.asm 
6010			; Submodule with memory fill routines. 
6010			;=========================================================================== 
6010			 
6010			; Some constants 
6010			BCKG_LINE_SIZE:  equ     32 
6010			 
6010			; Colors  
6010			BLACK:          equ 0<<3 
6010			BLUE:           equ 1<<3 
6010			RED:            equ 2<<3 
6010			MAGENTA:        equ 3<<3 
6010			GREEN:          equ 4<<3 
6010			CYAN:           equ 5<<3 
6010			YELLOW:         equ 6<<3 
6010			WHITE:          equ 7<<3 
6010			 
6010			 
6010			; Fills a memory area with a certain value. 
6010			; a = contains the fill value. 
6010			; hl = address to fill 
6010			; bc = size 
6010			fill_memory: 
6010 77			    ld (hl),a 
6011 5d			    ld e,l 
6012 54			    ld d,h 
6013 13			    inc de 
6014 0b			    dec bc 
6015			    ;ldir 
6015 c9			    ret	 
6016			 
6016			 
6016			; Fills a background line with a color.  
6016			; a = color 
6016			; de = points to background screen 
6016			fill_bckg_line: 
6016 01 20 00		    ld bc,BCKG_LINE_SIZE 
6019 6b			    ld l,e 
601a 62			    ld h,d 
601b cd 10 60		    call fill_memory 
601e			    ; check that destination address is still in screen background  
601e 21 ff 5a		    ld hl,COLOR_SCREEN+COLOR_SCREEN_SIZE-1 
6021 b7			    or a    ; clear carry 
6022 ed 52		    sbc hl,de ; compare  
6024 f0			    ret p 
6025			    ; ld start address 
6025 11 00 58		    ld de,COLOR_SCREEN  
6028 c9			    ret 
6029			 
6029			 
6029			; Increments the fill_colors_ptr and resets it if necessary. 
6029			inc_fill_colors_ptr: 
6029 2a 3e 60		    ld hl,(fill_colors_ptr) 
602c 23			    inc hl 
602d 22 3e 60		    ld (fill_colors_ptr),hl  
6030			     
6030			    ; check if out of range 
6030 01 45 60		    ld bc,fill_colors_end 
6033 b7			    or a    ; clear carry 
6034 ed 42		    sbc hl,bc ; compare  
6036 f8			    ret m 
6037			     
6037			    ; reset 
6037 21 40 60		    ld hl,fill_colors 
603a 22 3e 60		    ld (fill_colors_ptr),hl 
603d c9			    ret 
603e			 
603e			 
603e			; Pointer to fill colors. 
603e 00 00		fill_colors_ptr:    defw 0 
6040			 
6040			; Contains the colors for the lines. Each entry represnts the color for one line. 
6040			fill_colors: 
6040 10 30 08 20 18	    defb RED, YELLOW, BLUE, GREEN, MAGENTA 
6045			fill_colors_end:     
6045 00			    defb 0  ; WPMEM 
6046			     
6046			 
# End of file fill.asm
6046			include "clearscreen.asm" 
6046			;=========================================================================== 
6046			; clearscreen.asm 
6046			; Submodule to clear the entire screen. 
6046			;=========================================================================== 
6046			 
6046			; Some constants 
6046			SCREEN:         equ 0x4000 
6046			SCREEN_SIZE:    equ 0x1800 
6046			 
6046			COLOR_SCREEN:       equ 0x5800 
6046			COLOR_SCREEN_SIZE:  equ 0x0300 
6046			 
6046			 
6046			; Clears the screen 
6046			clear_screen: 
6046 af			    xor a 
6047 01 00 18		    ld bc,SCREEN_SIZE 
604a 21 00 40		    ld hl,SCREEN 
604d cd 10 60		    call fill_memory 
6050 c9			    ret	 
6051			     
6051			 
6051			; Clears the background 
6051			clear_backg: 
6051 af			    xor a 
6052 cd 56 60		    call fill_backg 
6055 c9			    ret	 
6056			 
6056			 
6056			; Fills the background with fore and background color. 
6056			; a contains the fill color. 
6056			fill_backg: 
6056 01 00 03		    ld bc,COLOR_SCREEN_SIZE 
6059 21 00 58		    ld hl,COLOR_SCREEN 
605c cd 10 60		    call fill_memory 
605f c9			    ret	 
6060			     
6060			 
6060			     
# End of file clearscreen.asm
6060			 
6060			 
6060			;=========================================================================== 
6060			; main routine - the code execution starts here. 
6060			; Sets up the new interrupt routine, the memory 
6060			; banks and jumps to the start loop. 
6060			;=========================================================================== 
6060			main: 
6060			    ; Disable interrupts 
6060 f3			    di 
6061			  
6061			    ; Setup stack 
6061 31 9b 60		    ld sp,stack_top 
6064			 
6064			if 0 
6064			    ld b,1 
6064			start_wait_loop: 
6064			    ld de,PAUSE_TIME 
6064			    call pause 
6064			    nop 
6064			    djnz start_wait_loop 
6064			endif 
6064			  
6064			    ; CLS 
6064 cd 46 60		    call clear_screen 
6067 cd 51 60		    call clear_backg 
606a			 
606a			    ; Init 
606a 21 40 60		    ld hl,fill_colors 
606d 22 3e 60		    ld (fill_colors_ptr),hl 
6070 11 00 58		    ld de,COLOR_SCREEN 
6073			     
6073			main_loop: 
6073			    ; fill line with color 
6073 2a 3e 60		    ld hl,(fill_colors_ptr) 
6076 7e			    ld a,(hl) 
6077 cd 16 60		    call fill_bckg_line 
607a			     
607a			    ; break 
607a d5			    push de 
607b 11 88 13		    ld de,PAUSE_TIME 
607e cd 01 60		    call pause 
6081 d1			    pop de 
6082			 
6082			    ; next line 
6082 cd 29 60		    call inc_fill_colors_ptr 
6085			 
6085 18 ec		    jr main_loop 
6087			 
6087			 
6087			 
6087			;=========================================================================== 
6087			; Stack.  
6087			;=========================================================================== 
6087			 
6087			; Stack: this area is reserved for the stack 
6087			STACK_SIZE: equ 10    ; in words 
6087			 
6087			 
6087			; Reserve stack space 
6087			stack_bottom: 
6087 0x00...		    defs    STACK_SIZE*2, 0 
609b 00			stack_top:  defb 0  ; WPMEM 
609c			 
609c			 
609c			;=========================================================================== 
609c			; After loading the snapshot file (.sna) the stackpointer is pointing here. 
609c			; The value is used as starting point. 
609c			;=========================================================================== 
609c 0x00...		    defs    0xFDFA - $, 0 
fdfa			; address is 0xFDFA 
fdfa 60 60		    defw    main ; The .sna format expects the starting address on the stack. 
fdfc			 
fdfc			 
fdfc			; Fill up to 65535 
fdfc 00...		    defs 0x10000 - $ 
# End of file main.asm
0000
